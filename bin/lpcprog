#!/usr/bin/env ruby
#*******************************************************************************
# Copyright (c) 2011 Christopher James Huff
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#*******************************************************************************

require 'rbconfig'
require 'pp'

os_str = RbConfig::CONFIG['host_os']
if(/mac|darwin/ === os_str)
    os = 'mac'
elsif(/linux|cygwin/ === os_str)
    os = 'unix'
elsif(/mswin|win|mingw/ === os_str)
    os = 'windows'
end

base_dir = {
    mac: '/Volumes',
    unix: '/mnt'
}[os.to_sym]

# puts "os_str: #{os_str}"
# puts "os: #{os}"
# puts "base_dir: #{base_dir}"
crp1_dev_dir = "#{base_dir}/CRP1 ENABLD"
crp2_dev_dir = "#{base_dir}/CRP2 ENABLD"
crp3_dev_dir = "#{base_dir}/CRP3 ENABLD"
nocrp_dev_dir = "#{base_dir}/CRP DISABLD"

# Devices with CRP1 and CRP2 can be programmed after deleting firmware.bin
if(Dir.exists?(nocrp_dev_dir))
    puts "Found LPC device"
    dev_dir = nocrp_dev_dir
elsif(Dir.exists?(crp2_dev_dir))
    puts "Found CRP1-protected LPC device"
    dev_dir = crp1_dev_dir
    exit
elsif(Dir.exists?(crp2_dev_dir))
    puts "Found CRP2-protected LPC device"
    dev_dir = crp1_dev_dir
    exit
elsif(Dir.exists?(crp3_dev_dir))
    puts "Found CRP3-protected LPC device. Can not program device."
    exit
else
    puts "No LPC device found."
    exit
end

def lpcrc(fw)
    # fix CRC (thanks to Roel Verdult for the lpcrc utility this is based on)
    blocks = fw.unpack('V7') # read 7 little endian 32-bit integers
    crc = (~(blocks.inject(0) {|crc, block| (crc + block) & 0xFFFFFFFF}) + 1) & 0xFFFFFFFF
    fw[7*4, 4] = [crc].pack('V')
    fw
end

fw_dst_path = "#{dev_dir}/firmware.bin"
fw_src_path = ARGV[0]
if(Dir.exists?(dev_dir))
    puts "Found writable LPC device"
    dev_size = File.size(fw_dst_path)
    bin_size = File.size(fw_src_path)
    puts "Flash size: #{dev_size} bytes, firmware size: #{bin_size} bytes"
    if(dev_size < bin_size)
        puts "Device too small for firmware file"
        exit
    end
    
    puts "writing #{fw_src_path} to #{fw_dst_path}"
    # Copy firmware to chip
    # Open destination as read-write *without truncation*, to prevent reallocation.
    File.open(fw_src_path, "rb") {|fw_src|
        File.open(fw_dst_path, "r+b") {|fw_dst|
        # File.open("firmware.bin", "w") {|fw_dst|
            fw = fw_src.read()
            fw = lpcrc(fw)
            fw += 0xFF.chr*(dev_size - bin_size)# pad to length
            puts "writing #{fw.size} bytes"
            fw_dst.write(fw)
        }
    }
else
    puts "No writable LPC device found"
    exit
end

if(os == 'mac')
    # `diskutil eject '#{dev_dir}'`
    `diskutil unmountDisk '#{dev_dir}'`
    puts "Done"
elsif(os == 'unix')
    # umount...
elsif(os == 'windows')
    # ???
end
